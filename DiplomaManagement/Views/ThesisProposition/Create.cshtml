@using DiplomaManagement.Helpers
@model DiplomaManagement.Models.ThesisPropositionViewModel

@{
    ViewData["Title"] = "Create";
}

@section Styles {
    <link rel="stylesheet" href="~/css/dropzone.css" asp-append-version="true" />
}

<h1>@Localizer["creation"]</h1>

<h4>@Localizer["new-thesis-proposition"]</h4>
<hr />
<form asp-action="Create" method="post" enctype="multipart/form-data">
    <input type="hidden" asp-for="StudentId" value="@ViewBag.StudentId" />
    <div class="row d-flex justify-content-center">
        <div class="col-md-4">
            <div class="form-group">
                <label asp-for="Title" class="control-label">@Localizer["title"]</label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="form-group mt-2">
                <label asp-for="Description" class="control-label">@Localizer["description"]</label>
                <textarea rows="7" asp-for="Description" class="form-control autogrow-textarea" data-max-rows="10" placeholder="@Localizer["leave-description-here"]" style="overflow-y: hidden; resize: none;"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                <label asp-for="PromoterId" class="control-label">@Localizer["assigned-director"]</label>
                <select asp-for="PromoterId" class="form-control" asp-items="ViewBag.Promoters"></select>
                <span asp-validation-for="PromoterId" class="text-danger"></span>
            </div>
            <div class="form-group mt-2">
                <label>@Localizer["add-files-optional"]</label>
                <section class="font-size-14px text-center dropzoneSection">
                    <input asp-for="PdfFiles" type="file" id="imageUpload" accept=".pdf, .docx" multiple class="d-none"/>
                    <label for="imageUpload" id="dropzone">@Localizer["drop-zone-tip"]<br/>
                        <button type="button" class="dropzoneButton" onclick="document.getElementById('imageUpload').click();">@Localizer["select-from-files"]</button><br/>
                        <span>@Localizer["drop-zone-info"]</span>
                    </label>
                </section>
                <aside class="mt-4">
                    <div class="row" id="fileList"></div>
                </aside>
                <div id="error-message" class="d-flex align-items-center justify-content-center text-danger mb-2"></div>
            </div>
        </div>
        <div class="form-group col-12 text-center">
            <a asp-controller="Thesis" asp-action="AvailableTheses" class="btn btn-outline-light">@Localizer["back-to-list"]</a>
            <input type="submit" value="@Localizer["submit"]" class="btn btn-primary"/>
        </div>
    </div>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/js/autogrow_textarea.js"></script>
    <script>
        const fileDrag = document.getElementById('dropzone');
        const imageUpload = document.getElementById('imageUpload');

        let uploadedFiles = [];
        const objectURLs = [];
        const maxFiles = 3;
        const maxFileSize = 5242880; // 5MB

        $('#addImagesModal').on('click', '.dismissImages', function () {
            uploadedFiles = [];
            updateFileList();
            $('#ZamowienieAddImages').prop('checked', false);
        });

        $('.acceptImages').on('click', function () {
            $('#addImagesModal').modal('hide');
        });

        function truncateFileName(fileName, maxLength) {
            if (fileName.length <= maxLength) return fileName;

            const extIndex = fileName.lastIndexOf('.');
            const namePart = fileName.substring(0, extIndex);
            const extPart = fileName.substring(extIndex);

            if (extPart.length >= maxLength - 3) {
                // Handle cases where extension is too long to truncate properly
                return fileName.substring(0, maxLength - 3) + '...';
            }

            const truncatedNamePart = namePart.substring(
                0,
                maxLength - extPart.length - 3,
            );
            return truncatedNamePart + '...' + extPart;
        }

        fileDrag.addEventListener('dragover', (event) => {
            event.preventDefault();
            event.stopPropagation();
        });

        fileDrag.addEventListener('dragleave', (event) => {
            event.preventDefault();
            event.stopPropagation();
        });

        fileDrag.addEventListener('drop', (event) => {
            event.preventDefault();
            event.stopPropagation();

            const files = event.dataTransfer.files;
            if (files.length > 0) {
                handleFiles(files);
            }
        });

        function handleFiles(files) {
            const dataTransfer = new DataTransfer();
            for (const file of files) {
                dataTransfer.items.add(file);
            }

            imageUpload.files = dataTransfer.files;

            const changeEvent = new Event('change');
            imageUpload.dispatchEvent(changeEvent);
        }

        imageUpload.addEventListener('change', async function(event) {
            const errorMessageContainer = document.getElementById('error-message');
            errorMessageContainer.textContent = '';
            const files = event.target.files;

            if (uploadedFiles.length + files.length > maxFiles) {
                errorMessageContainer.textContent = "Możesz wysłać maksymalnie 3 pliki";
            }
            else {
                for (const file of files) {
                    if (file.size > maxFileSize) {
                        errorMessageContainer.textContent = "Plik nie może być większy niż 5MB";
                    } else {
                        uploadedFiles.push(file);
                    }
                }
            }

            updateFileList();
        });

        function updateFileList() {
            const fileList = document.getElementById('fileList');
            fileList.innerHTML = '';

            uploadedFiles.forEach((file, index) => {
                const fileElement = document.createElement('div');
                fileElement.className = 'col-12 col-sm-6 mb-3 file-item';

                if (index % 2 === 0 && index !== uploadedFiles.length - 1) {
                    fileElement.classList.add('oddItem');
                }

                fileElement.innerHTML = `
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="uploadedFiles">
                            <div>${truncateFileName(file.name, 27)}</div>
                        </div>
                        <button type="button" class="removeButton remove-file" data-index="${index}">
                            <img src="/img/delete.svg" alt="Remove" class="deleteIcon"/>
                        </button>
                    </div>
                `;

                fileList.appendChild(fileElement);

                fileElement.querySelector('.remove-file').addEventListener('click', function() {
                    const fileIndex = this.getAttribute('data-index');
                    uploadedFiles.splice(fileIndex, 1);
                    updateFileList();
                });
            });

            const dataTransfer = new DataTransfer();
            for (const file of uploadedFiles) {
                dataTransfer.items.add(file);
            }

            imageUpload.files = dataTransfer.files;
        }
    </script>
}
